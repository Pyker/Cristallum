// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.1.1'
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}



// for people who want stable
plugins {
    //id "net.minecraftforge.gradle.forge" version "2.0.2"
    id "org.ajoberstar.grgit" version "1.3.2"
}

import org.ajoberstar.grgit.*
import groovy.json.JsonSlurper

apply plugin: 'org.kordamp.gradle.stats'
apply plugin: 'net.minecraftforge.gradle.forge'

//ext.repo = Grgit.open(project.file('.'))

def gitHash = 'unknown'
if (new File(projectDir, '.git').exists()) {
    def repo = Grgit.open(project.file('.'))
    gitHash = repo.log().find().abbreviatedId
}

group = package_group

archivesBaseName = mod_name
def mod_version = "v${mod_version_major}.${mod_version_minor}."+gitHash
version = "${mc_version}-${mod_version}"

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"

    replace "@VERSION@", mod_version
    mappings = "snapshot_20160406"
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    compile files ("libs/RedstoneFlux-API")

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

targetCompatibility=8
sourceCompatibility=8

jar {
    classifier = ''
    manifest.mainAttributes(
            "Built-By": System.getProperty('user.name'),
            "Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Git-Hash": gitHash
    )
}


// Javadoc Jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

// Deobfuscated Jar
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

tasks.build.dependsOn sourceJar, javadocJar, deobfJar

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}

//IDEA assets fix
idea { module { inheritOutputDirs = true } }

def shouldTag(){
    def p = new URL ("https://api.github.com/repos/${github_repo}/releases?access_token=$token").text
    def json = new JsonSlurper().parseText(p)
    println "Searching for " + version + " in ${github_repo}"
    json.each {
        if(it.tag_name == version){
            return false
        }
    }
    return true
}

task tagRelease() {
    doLast {
        if(shouldTag()) {
            println "Releasing ${version}."
            System.setProperty("org.ajoberstar.grgit.auth.username", "$usr")
            System.setProperty("org.ajoberstar.grgit.auth.password", "$psw")
            repo.tag.add {
                name = version
                message = "Release of ${version} built against forge ${forge_version}"
                pointsTo = gitHash
            }
            repo.push {
                tags = true
            }
        } else {
            println "${version} already exists."
        }
    }
}
